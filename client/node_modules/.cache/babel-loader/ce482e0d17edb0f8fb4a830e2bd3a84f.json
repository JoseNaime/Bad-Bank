{"ast":null,"code":"var _jsxFileName = \"/Users/jose_n/Library/Mobile Documents/com~apple~CloudDocs/WebStorm Projects/MITxPro_MERN_Course/banking-app/client/src/components/Withdraw.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { UserContext } from \"../App\";\nimport TransactionHistoryCard from \"./TransactionHistoryCard\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Withdraw() {\n  _s();\n\n  const {\n    userContext,\n    setUserContext\n  } = React.useContext(UserContext);\n  const [userInput, setUserInput] = useState(null);\n  const [error, setError] = useState(\"\");\n  const user = userContext.users.find(user => user.id === userContext.currentUser);\n\n  function handleWithdraw(e) {\n    e.preventDefault();\n    const amount = e.target.amount.value;\n    const newBalance = Number(user.balance) - Number(amount);\n\n    if (newBalance >= 0) {\n      setUserContext({ ...userContext,\n        users: userContext.users.map(user => user.id === userContext.currentUser ? { ...user,\n          balance: newBalance,\n          withdraws: [...user.withdraws, {\n            amount: amount,\n            date: new Date().toLocaleDateString()\n          }]\n        } : user)\n      });\n      alert(\"Withdraw completed successfully!\");\n    } else {\n      setError(\"Insufficient funds\");\n    }\n\n    setUserInput(\"\");\n  }\n\n  const userWithdrawElements = user && user.withdraws.map((withdraw, i) => {\n    return /*#__PURE__*/_jsxDEV(TransactionHistoryCard, {\n      id: i,\n      amount: withdraw.amount,\n      date: withdraw.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      header: \"Withdraw\",\n      userContext: userContext,\n      handleSubmit: handleWithdraw,\n      userInput: userInput,\n      setUserInput: setUserInput,\n      error: error,\n      setError: setError,\n      transactionHistoryElements: userWithdrawElements,\n      historyLength: user ? user.withdraws.length : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Withdraw, \"0daNC4lX7VN9dmwAvnXr3hc0nYM=\");\n\n_c = Withdraw;\nexport default Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/Users/jose_n/Library/Mobile Documents/com~apple~CloudDocs/WebStorm Projects/MITxPro_MERN_Course/banking-app/client/src/components/Withdraw.jsx"],"names":["React","useState","UserContext","TransactionHistoryCard","Card","Withdraw","userContext","setUserContext","useContext","userInput","setUserInput","error","setError","user","users","find","id","currentUser","handleWithdraw","e","preventDefault","amount","target","value","newBalance","Number","balance","map","withdraws","date","Date","toLocaleDateString","alert","userWithdrawElements","withdraw","i","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,QAA1B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAAgCP,KAAK,CAACQ,UAAN,CAAiBN,WAAjB,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,IAAI,GAAGP,WAAW,CAACQ,KAAZ,CAAkBC,IAAlB,CAAuBF,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYV,WAAW,CAACW,WAAvD,CAAb;;AAEA,WAASC,cAAT,CAAwBC,CAAxB,EAA2B;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,MAAM,GAAGF,CAAC,CAACG,MAAF,CAASD,MAAT,CAAgBE,KAA/B;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACZ,IAAI,CAACa,OAAN,CAAN,GAAuBD,MAAM,CAACJ,MAAD,CAAhD;;AACA,QAAIG,UAAU,IAAI,CAAlB,EAAqB;AAEjBjB,MAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEXQ,QAAAA,KAAK,EAAER,WAAW,CAACQ,KAAZ,CAAkBa,GAAlB,CAAsBd,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYV,WAAW,CAACW,WAAxB,GAAsC,EACvE,GAAGJ,IADoE;AAEvEa,UAAAA,OAAO,EAAEF,UAF8D;AAGvEI,UAAAA,SAAS,EAAE,CAAC,GAAGf,IAAI,CAACe,SAAT,EAAoB;AAC3BP,YAAAA,MAAM,EAAEA,MADmB;AAE3BQ,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,kBAAX;AAFqB,WAApB;AAH4D,SAAtC,GAOjClB,IAPG;AAFI,OAAD,CAAd;AAWAmB,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACH,KAdD,MAcO;AACHpB,MAAAA,QAAQ,CAAC,oBAAD,CAAR;AACH;;AACDF,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;;AAED,QAAMuB,oBAAoB,GAAGpB,IAAI,IAAIA,IAAI,CAACe,SAAL,CAAeD,GAAf,CAAmB,CAACO,QAAD,EAAWC,CAAX,KAAiB;AACrE,wBACI,QAAC,sBAAD;AAAwB,MAAA,EAAE,EAAEA,CAA5B;AAA+B,MAAA,MAAM,EAAED,QAAQ,CAACb,MAAhD;AAAwD,MAAA,IAAI,EAAEa,QAAQ,CAACL;AAAvE;AAAA;AAAA;AAAA;AAAA,YADJ;AAEH,GAHoC,CAArC;AAKA,sBACI;AAAA,2BACI,QAAC,IAAD;AACI,MAAA,MAAM,EAAE,UADZ;AAEI,MAAA,WAAW,EAAEvB,WAFjB;AAGI,MAAA,YAAY,EAAEY,cAHlB;AAII,MAAA,SAAS,EAAET,SAJf;AAKI,MAAA,YAAY,EAAEC,YALlB;AAMI,MAAA,KAAK,EAAEC,KANX;AAOI,MAAA,QAAQ,EAAEC,QAPd;AAQI,MAAA,0BAA0B,EAAEqB,oBARhC;AASI,MAAA,aAAa,EAAEpB,IAAI,GAAGA,IAAI,CAACe,SAAL,CAAeQ,MAAlB,GAA2B;AATlD;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAcH;;GAjDQ/B,Q;;KAAAA,Q;AAmDT,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport {UserContext} from \"../App\";\nimport TransactionHistoryCard from \"./TransactionHistoryCard\";\nimport Card from \"./Card\";\n\nfunction Withdraw() {\n    const {userContext, setUserContext} = React.useContext(UserContext);\n    const [userInput, setUserInput] = useState(null)\n    const [error, setError] = useState(\"\")\n    const user = userContext.users.find(user => user.id === userContext.currentUser);\n\n    function handleWithdraw(e) {\n        e.preventDefault();\n        const amount = e.target.amount.value;\n        const newBalance = Number(user.balance) - Number(amount);\n        if (newBalance >= 0) {\n\n            setUserContext({\n                ...userContext,\n                users: userContext.users.map(user => user.id === userContext.currentUser ? {\n                    ...user,\n                    balance: newBalance,\n                    withdraws: [...user.withdraws, {\n                        amount: amount,\n                        date: new Date().toLocaleDateString()\n                    }]\n                } : user)\n            });\n            alert(\"Withdraw completed successfully!\");\n        } else {\n            setError(\"Insufficient funds\")\n        }\n        setUserInput(\"\")\n    }\n\n    const userWithdrawElements = user && user.withdraws.map((withdraw, i) => {\n        return (\n            <TransactionHistoryCard id={i} amount={withdraw.amount} date={withdraw.date} />)\n    })\n\n    return (\n        <>\n            <Card\n                header={\"Withdraw\"}\n                userContext={userContext}\n                handleSubmit={handleWithdraw}\n                userInput={userInput}\n                setUserInput={setUserInput}\n                error={error}\n                setError={setError}\n                transactionHistoryElements={userWithdrawElements}\n                historyLength={user ? user.withdraws.length : 0} />\n        </>\n    );\n}\n\nexport default Withdraw;"]},"metadata":{},"sourceType":"module"}